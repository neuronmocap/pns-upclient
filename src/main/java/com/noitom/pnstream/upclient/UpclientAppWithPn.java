/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.noitom.pnstream.upclient;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;

import java.net.InetSocketAddress;

public class UpclientAppWithPn {
    private final EventLoopGroup group;
    private final Bootstrap bootstrapToServer;
    private final Bootstrap bootstrapToPNStudio;
    private EventLoop sharedEventLoop;

    public UpclientAppWithPn() {
        this.group = new NioEventLoopGroup();
        bootstrapToServer = new Bootstrap();
        bootstrapToPNStudio = new Bootstrap();

    }

    private Channel connectToServer(InetSocketAddress addressToServer){
        bootstrapToServer.group(group)
                .channel(NioSocketChannel.class)
                .option(ChannelOption.SO_KEEPALIVE, true)
                .handler(new ChannelInitializer<Channel>() {
                    @Override
                    protected void initChannel(Channel ch) throws Exception {
                        ChannelPipeline pipeline = ch.pipeline();
                        pipeline.addLast("UpOutboundHandler", new UpOutboundHandler());
                    }
                });
        Channel ch = bootstrapToServer.connect(addressToServer).syncUninterruptibly().channel();
        sharedEventLoop = ch.eventLoop();
        return ch;
    }

    private Channel connectToPNStudio(InetSocketAddress addressToPNStudio, Channel serverChannel){
        if(sharedEventLoop == null){
            System.out.println("Please connect to server first");
            return null;
        }

        bootstrapToPNStudio.group(sharedEventLoop)
                .channel(NioSocketChannel.class)
                .option(ChannelOption.SO_KEEPALIVE, true)
                .handler(new ChannelInitializer<Channel>() {
                    @Override
                    protected void initChannel(Channel ch) throws Exception {
                        ChannelPipeline pipeline = ch.pipeline();
                        pipeline.addLast("PnInboundHandler", new PnInboundHandler(serverChannel));
                    }
                });
        Channel ch = bootstrapToPNStudio.connect(addressToPNStudio).syncUninterruptibly().channel();
        return ch;
    }

    public void stop(){
        group.shutdownGracefully();
    }

    public static void main(String[] args) throws Exception{
        String strUsage = "remote_addr";
        String serverHost = "127.0.0.1";
        String pnStudioHost = "127.0.0.1";
        int serverPort = 9998;
        int pnStudioPort = 7001;

        if(args.length == 1){
            serverHost = args[0];
        } else {
            System.out.println(strUsage);
            System.exit(1);
        }

        UpclientAppWithPn upclientAppWithPn = new UpclientAppWithPn();
        try{
            System.out.println("connecting  "+serverHost+":"+serverPort);
            Channel channelToServer = upclientAppWithPn.connectToServer(new InetSocketAddress(serverHost, serverPort));

            System.out.println("connecting  "+pnStudioHost+":"+pnStudioPort);
            Channel channelToPNStudio = upclientAppWithPn.connectToPNStudio(new InetSocketAddress(pnStudioHost, pnStudioPort), channelToServer);

            // Wait until the connection is closed.
            channelToServer.closeFuture().sync();
            channelToPNStudio.closeFuture().sync();

        } finally {
            upclientAppWithPn.stop();
        }
    }


}
